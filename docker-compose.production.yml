version: '3.8'

services:
  # Redis service for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Load balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: microservices-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Health check port
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - auth-service
      - data-service
      - processing-service
      - integration-service
      - notification-service
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  auth-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.service
      args:
        SERVICE_NAME: auth
    container_name: microservices-auth
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - ./services/auth/data:/app/data
      - app_logs:/app/logs
    networks:
      - microservices_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  data-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.service
      args:
        SERVICE_NAME: data
    container_name: microservices-data
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - ./services/data/data:/app/data
      - app_logs:/app/logs
    networks:
      - microservices_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  processing-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.service
      args:
        SERVICE_NAME: processing
    container_name: microservices-processing
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3003
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - ./services/processing/data:/app/data
      - app_logs:/app/logs
    networks:
      - microservices_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  integration-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.service
      args:
        SERVICE_NAME: integration
    container_name: microservices-integration
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3004
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
    volumes:
      - ./services/integration/data:/app/data
      - app_logs:/app/logs
    networks:
      - microservices_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notification-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.service
      args:
        SERVICE_NAME: notification
    container_name: microservices-notification
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3005
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=2
      - EMAIL_PROVIDER=smtp
      - SMS_PROVIDER=twilio
      - PUSH_PROVIDER=fcm
    volumes:
      - ./services/notification/data:/app/data
      - app_logs:/app/logs
    networks:
      - microservices_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: microservices-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices_network

  grafana:
    image: grafana/grafana:latest
    container_name: microservices-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - microservices_network
    depends_on:
      - prometheus

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: microservices-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - microservices_network

  promtail:
    image: grafana/promtail:latest
    container_name: microservices-promtail
    restart: unless-stopped
    volumes:
      - ./infrastructure/monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - microservices_network
    depends_on:
      - loki

networks:
  microservices_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local