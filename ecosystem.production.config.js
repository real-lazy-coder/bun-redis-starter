module.exports = {
  apps: [
    {
      name: 'auth-service',
      script: 'bun',
      args: 'src/index.ts',
      cwd: './services/auth',
      instances: 'max', // Use all CPU cores
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3001,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'info',
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: 3001,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'debug',
      },
      // Production optimizations
      max_memory_restart: '500M',
      min_uptime: '10s',
      max_restarts: 10,
      autorestart: true,
      watch: false,
      ignore_watch: ['node_modules', 'dist', 'data', 'logs'],
      // Health checks
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,
      // Logging
      log_file: './logs/auth-service.log',
      error_file: './logs/auth-service-error.log',
      out_file: './logs/auth-service-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      // Process management
      kill_timeout: 5000,
      wait_ready: true,
      listen_timeout: 3000,
    },
    {
      name: 'data-service',
      script: 'bun',
      args: 'src/index.ts',
      cwd: './services/data',
      instances: 2, // Database service - limited clustering
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3002,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'info',
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: 3002,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'debug',
      },
      max_memory_restart: '800M',
      min_uptime: '10s',
      max_restarts: 10,
      autorestart: true,
      watch: false,
      ignore_watch: ['node_modules', 'dist', 'data', 'logs'],
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,
      log_file: './logs/data-service.log',
      error_file: './logs/data-service-error.log',
      out_file: './logs/data-service-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      kill_timeout: 5000,
      wait_ready: true,
      listen_timeout: 3000,
    },
    {
      name: 'processing-service',
      script: 'bun',
      args: 'src/index.ts',
      cwd: './services/processing',
      instances: 'max',
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3003,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'info',
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: 3003,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'debug',
      },
      max_memory_restart: '1G',
      min_uptime: '10s',
      max_restarts: 10,
      autorestart: true,
      watch: false,
      ignore_watch: ['node_modules', 'dist', 'data', 'logs'],
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,
      log_file: './logs/processing-service.log',
      error_file: './logs/processing-service-error.log',
      out_file: './logs/processing-service-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      kill_timeout: 5000,
      wait_ready: true,
      listen_timeout: 3000,
    },
    {
      name: 'integration-service',
      script: 'bun',
      args: 'src/index.ts',
      cwd: './services/integration',
      instances: 'max',
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3004,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'info',
        REDIS_DB: '1',
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: 3004,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'debug',
        REDIS_DB: '1',
      },
      max_memory_restart: '600M',
      min_uptime: '10s',
      max_restarts: 10,
      autorestart: true,
      watch: false,
      ignore_watch: ['node_modules', 'dist', 'data', 'logs'],
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,
      log_file: './logs/integration-service.log',
      error_file: './logs/integration-service-error.log',
      out_file: './logs/integration-service-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      kill_timeout: 5000,
      wait_ready: true,
      listen_timeout: 3000,
    },
    {
      name: 'notification-service',
      script: 'bun',
      args: 'src/index.ts',
      cwd: './services/notification',
      instances: 'max',
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3005,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'info',
        REDIS_DB: '2',
        EMAIL_PROVIDER: 'smtp',
        SMS_PROVIDER: 'twilio',
        PUSH_PROVIDER: 'fcm',
      },
      env_staging: {
        NODE_ENV: 'staging',
        PORT: 3005,
        HOST: '0.0.0.0',
        LOG_LEVEL: 'debug',
        REDIS_DB: '2',
        EMAIL_PROVIDER: 'smtp',
        SMS_PROVIDER: 'twilio',
        PUSH_PROVIDER: 'fcm',
      },
      max_memory_restart: '400M',
      min_uptime: '10s',
      max_restarts: 10,
      autorestart: true,
      watch: false,
      ignore_watch: ['node_modules', 'dist', 'data', 'logs'],
      health_check_grace_period: 3000,
      health_check_fatal_exceptions: true,
      log_file: './logs/notification-service.log',
      error_file: './logs/notification-service-error.log',
      out_file: './logs/notification-service-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      kill_timeout: 5000,
      wait_ready: true,
      listen_timeout: 3000,
    },
  ],
};