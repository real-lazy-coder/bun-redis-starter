# Production nginx configuration for microservices load balancing
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream definitions for microservices
    upstream auth_service {
        least_conn;
        server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
        # Add more auth service instances for scaling
        # server 127.0.0.1:3011 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream data_service {
        least_conn;
        server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;
        # Add more data service instances for scaling
        # server 127.0.0.1:3012 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream processing_service {
        least_conn;
        server 127.0.0.1:3003 max_fails=3 fail_timeout=30s;
        # Add more processing service instances for scaling
        # server 127.0.0.1:3013 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream integration_service {
        least_conn;
        server 127.0.0.1:3004 max_fails=3 fail_timeout=30s;
        # Add more integration service instances for scaling
        # server 127.0.0.1:3014 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream notification_service {
        least_conn;
        server 127.0.0.1:3005 max_fails=3 fail_timeout=30s;
        # Add more notification service instances for scaling
        # server 127.0.0.1:3015 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check configuration
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn addr 10;

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Auth service routes
        location /auth {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://auth_service;
            
            # Health check bypass
            location /auth/health {
                proxy_pass http://auth_service;
                access_log off;
            }
        }

        # Data service routes
        location /data {
            proxy_pass http://data_service;
            
            location /data/health {
                proxy_pass http://data_service;
                access_log off;
            }
        }

        # Processing service routes
        location /processing {
            proxy_pass http://processing_service;
            
            location /processing/health {
                proxy_pass http://processing_service;
                access_log off;
            }
        }

        # Integration service routes
        location /integration {
            proxy_pass http://integration_service;
            
            location /integration/health {
                proxy_pass http://integration_service;
                access_log off;
            }
        }

        # Notification service routes
        location /notification {
            proxy_pass http://notification_service;
            
            location /notification/health {
                proxy_pass http://notification_service;
                access_log off;
            }
        }

        # Global health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","nginx":"ok"}';
            add_header Content-Type application/json;
        }

        # Metrics aggregation endpoint
        location /metrics {
            access_log off;
            
            # Return metrics from all services
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local services = {
                    {name = "auth", port = 3001},
                    {name = "data", port = 3002},
                    {name = "processing", port = 3003},
                    {name = "integration", port = 3004},  
                    {name = "notification", port = 3005}
                }
                
                local metrics = {}
                
                for _, service in ipairs(services) do
                    local httpc = http.new()
                    httpc:set_timeout(5000)
                    
                    local res, err = httpc:request_uri("http://127.0.0.1:" .. service.port .. "/metrics")
                    if res and res.status == 200 then
                        local ok, data = pcall(cjson.decode, res.body)
                        if ok then
                            metrics[service.name] = data
                        end
                    end
                    httpc:close()
                end
                
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode({
                    platform_metrics = metrics,
                    timestamp = ngx.utctime(),
                    nginx_status = "healthy"
                }))
            }
        }

        # Static files (if any)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ /(package\.json|\.env|config/) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Default 404 for undefined routes
        location / {
            return 404 '{"error":"Not Found","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server configuration (production)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/microservices.crt;
        ssl_certificate_key /etc/ssl/private/microservices.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozTLS:10m;
        ssl_session_tickets off;

        # SSL protocols and ciphers
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # Same configuration as HTTP server but with SSL
        # (Copy all location blocks from above)
        include /etc/nginx/conf.d/microservices-locations.conf;
    }
}